import ZStream from 'pako/lib/zlib/zstream';
import { deflateInit2, deflate } from 'pako/lib/zlib/deflate';
import { inflate, inflateInit2 } from 'pako/lib/zlib/inflate';
import messages from 'pako/lib/zlib/messages.js';
import { Z_NO_FLUSH, Z_SYNC_FLUSH, Z_OK, Z_STREAM_END, Z_DEFAULT_COMPRESSION, Z_DEFAULT_STRATEGY, Z_DEFLATED } from 'pako/lib/zlib/constants';
var CHUNK_SIZE = 16384;
var WINDOW_BITS = 15;
/**
 * Handles de-/compression via #inflate() and #deflate(), calls you back via #deflatedReady() and #inflatedReady().
 * The chunk we get from deflater is actually a view of a 16kB arraybuffer, so we need to copy the relevant parts
 * memory to a new arraybuffer.
 */

export default function Compressor(inflatedReady, deflatedReady) {
  var _this = this;

  this.inflatedReady = inflatedReady;
  this.deflatedReady = deflatedReady;
  this._inflate = inflater(function (chunk) {
    return _this.inflatedReady(chunk.buffer.slice(chunk.byteOffset, chunk.byteOffset + chunk.length));
  });
  this._deflate = deflater(function (chunk) {
    return _this.deflatedReady(chunk.buffer.slice(chunk.byteOffset, chunk.byteOffset + chunk.length));
  });
}

Compressor.prototype.inflate = function (buffer) {
  this._inflate(new Uint8Array(buffer));
};

Compressor.prototype.deflate = function (buffer) {
  this._deflate(new Uint8Array(buffer));
};

function deflater(emit) {
  var stream = new ZStream();
  var status = deflateInit2(stream, Z_DEFAULT_COMPRESSION, Z_DEFLATED, WINDOW_BITS, 8, Z_DEFAULT_STRATEGY);

  if (status !== Z_OK) {
    throw new Error('Problem initializing deflate stream: ' + messages[status]);
  }

  return function (data) {
    if (data === undefined) return emit(); // Attach the input data

    stream.input = data;
    stream.next_in = 0;
    stream.avail_in = stream.input.length;
    var status;
    var output;
    var start;
    var ret = true;

    do {
      // When the stream gets full, we need to create new space.
      if (stream.avail_out === 0) {
        stream.output = new Uint8Array(CHUNK_SIZE);
        start = stream.next_out = 0;
        stream.avail_out = CHUNK_SIZE;
      } // Perform the deflate


      status = deflate(stream, Z_SYNC_FLUSH);

      if (status !== Z_STREAM_END && status !== Z_OK) {
        throw new Error('Deflate problem: ' + messages[status]);
      } // If the output buffer got full, flush the data.


      if (stream.avail_out === 0 && stream.next_out > start) {
        output = stream.output.subarray(start, start = stream.next_out);
        ret = emit(output);
      }
    } while ((stream.avail_in > 0 || stream.avail_out === 0) && status !== Z_STREAM_END); // Emit whatever is left in output.


    if (stream.next_out > start) {
      output = stream.output.subarray(start, start = stream.next_out);
      ret = emit(output);
    }

    return ret;
  };
}

function inflater(emit) {
  var stream = new ZStream();
  var status = inflateInit2(stream, WINDOW_BITS);

  if (status !== Z_OK) {
    throw new Error('Problem initializing inflate stream: ' + messages[status]);
  }

  return function (data) {
    if (data === undefined) return emit();
    var start;
    stream.input = data;
    stream.next_in = 0;
    stream.avail_in = stream.input.length;
    var status, output;
    var ret = true;

    do {
      if (stream.avail_out === 0) {
        stream.output = new Uint8Array(CHUNK_SIZE);
        start = stream.next_out = 0;
        stream.avail_out = CHUNK_SIZE;
      }

      status = inflate(stream, Z_NO_FLUSH);

      if (status !== Z_STREAM_END && status !== Z_OK) {
        throw new Error('inflate problem: ' + messages[status]);
      }

      if (stream.next_out) {
        if (stream.avail_out === 0 || status === Z_STREAM_END) {
          output = stream.output.subarray(start, start = stream.next_out);
          ret = emit(output);
        }
      }
    } while (stream.avail_in > 0 && status !== Z_STREAM_END);

    if (stream.next_out > start) {
      output = stream.output.subarray(start, start = stream.next_out);
      ret = emit(output);
    }

    return ret;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21wcmVzc2lvbi5qcyJdLCJuYW1lcyI6WyJaU3RyZWFtIiwiZGVmbGF0ZUluaXQyIiwiZGVmbGF0ZSIsImluZmxhdGUiLCJpbmZsYXRlSW5pdDIiLCJtZXNzYWdlcyIsIlpfTk9fRkxVU0giLCJaX1NZTkNfRkxVU0giLCJaX09LIiwiWl9TVFJFQU1fRU5EIiwiWl9ERUZBVUxUX0NPTVBSRVNTSU9OIiwiWl9ERUZBVUxUX1NUUkFURUdZIiwiWl9ERUZMQVRFRCIsIkNIVU5LX1NJWkUiLCJXSU5ET1dfQklUUyIsIkNvbXByZXNzb3IiLCJpbmZsYXRlZFJlYWR5IiwiZGVmbGF0ZWRSZWFkeSIsIl9pbmZsYXRlIiwiaW5mbGF0ZXIiLCJjaHVuayIsImJ1ZmZlciIsInNsaWNlIiwiYnl0ZU9mZnNldCIsImxlbmd0aCIsIl9kZWZsYXRlIiwiZGVmbGF0ZXIiLCJwcm90b3R5cGUiLCJVaW50OEFycmF5IiwiZW1pdCIsInN0cmVhbSIsInN0YXR1cyIsIkVycm9yIiwiZGF0YSIsInVuZGVmaW5lZCIsImlucHV0IiwibmV4dF9pbiIsImF2YWlsX2luIiwib3V0cHV0Iiwic3RhcnQiLCJyZXQiLCJhdmFpbF9vdXQiLCJuZXh0X291dCIsInN1YmFycmF5Il0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxPQUFQLE1BQW9CLHVCQUFwQjtBQUNBLFNBQVNDLFlBQVQsRUFBdUJDLE9BQXZCLFFBQXNDLHVCQUF0QztBQUNBLFNBQVNDLE9BQVQsRUFBa0JDLFlBQWxCLFFBQXNDLHVCQUF0QztBQUNBLE9BQU9DLFFBQVAsTUFBcUIsMkJBQXJCO0FBQ0EsU0FDRUMsVUFERixFQUNjQyxZQURkLEVBQzRCQyxJQUQ1QixFQUVFQyxZQUZGLEVBRWdCQyxxQkFGaEIsRUFHRUMsa0JBSEYsRUFHc0JDLFVBSHRCLFFBSU8seUJBSlA7QUFNQSxJQUFNQyxVQUFVLEdBQUcsS0FBbkI7QUFDQSxJQUFNQyxXQUFXLEdBQUcsRUFBcEI7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztB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QUFDRjtBQUNGLEtBbEJELFFBa0JVUixNQUFNLENBQUNPLFFBQVAsR0FBa0IsQ0FBbkIsSUFBeUJOLE1BQU0sS0FBS3RCLFlBbEI3Qzs7QUFvQkEsUUFBSXFCLE1BQU0sQ0FBQ1ksUUFBUCxHQUFrQkgsS0FBdEIsRUFBNkI7QUFDM0JELE1BQUFBLE1BQU0sR0FBR1IsTUFBTSxDQUFDUSxNQUFQLENBQWNLLFFBQWQsQ0FBdUJKLEtBQXZCLEVBQThCQSxLQUFLLEdBQUdULE1BQU0sQ0FBQ1ksUUFBN0MsQ0FBVDtBQUNBRixNQUFBQSxHQUFHLEdBQUdYLElBQUksQ0FBQ1MsTUFBRCxDQUFWO0FBQ0Q7O0FBRUQsV0FBT0UsR0FBUDtBQUNELEdBckNEO0FBc0NEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFpTdHJlYW0gZnJvbSAncGFrby9saWIvemxpYi96c3RyZWFtJ1xuaW1wb3J0IHsgZGVmbGF0ZUluaXQyLCBkZWZsYXRlIH0gZnJvbSAncGFrby9saWIvemxpYi9kZWZsYXRlJ1xuaW1wb3J0IHsgaW5mbGF0ZSwgaW5mbGF0ZUluaXQyIH0gZnJvbSAncGFrby9saWIvemxpYi9pbmZsYXRlJ1xuaW1wb3J0IG1lc3NhZ2VzIGZyb20gJ3Bha28vbGliL3psaWIvbWVzc2FnZXMuanMnXG5pbXBvcnQge1xuICBaX05PX0ZMVVNILCBaX1NZTkNfRkxVU0gsIFpfT0ssXG4gIFpfU1RSRUFNX0VORCwgWl9ERUZBVUxUX0NPTVBSRVNTSU9OLFxuICBaX0RFRkFVTFRfU1RSQVRFR1ksIFpfREVGTEFURURcbn0gZnJvbSAncGFrby9saWIvemxpYi9jb25zdGFudHMnXG5cbmNvbnN0IENIVU5LX1NJWkUgPSAxNjM4NFxuY29uc3QgV0lORE9XX0JJVFMgPSAxNVxuXG4vKipcbiAqIEhhbmRsZXMgZGUtL2NvbXByZXNzaW9uIHZpYSAjaW5mbGF0ZSgpIGFuZCAjZGVmbGF0ZSgpLCBjYWxscyB5b3UgYmFjayB2aWEgI2RlZmxhdGVkUmVhZHkoKSBhbmQgI2luZmxhdGVkUmVhZHkoKS5cbiAqIFRoZSBjaHVuayB3ZSBnZXQgZnJvbSBkZWZsYXRlciBpcyBhY3R1YWxseSBhIHZpZXcgb2YgYSAxNmtCIGFycmF5YnVmZmVyLCBzbyB3ZSBuZWVkIHRvIGNvcHkgdGhlIHJlbGV2YW50IHBhcnRzXG4gKiBtZW1vcnkgdG8gYSBuZXcgYXJyYXlidWZmZXIuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbXByZXNzb3IgKGluZmxhdGVkUmVhZHksIGRlZmxhdGVkUmVhZHkpIHtcbiAgdGhpcy5pbmZsYXRlZFJlYWR5ID0gaW5mbGF0ZWRSZWFkeVxuICB0aGlzLmRlZmxhdGVkUmVhZHkgPSBkZWZsYXRlZFJlYWR5XG4gIHRoaXMuX2luZmxhdGUgPSBpbmZsYXRlcihjaHVuayA9PiB0aGlzLmluZmxhdGVkUmVhZHkoY2h1bmsuYnVmZmVyLnNsaWNlKGNodW5rLmJ5dGVPZmZzZXQsIGNodW5rLmJ5dGVPZmZzZXQgKyBjaHVuay5sZW5ndGgpKSlcbiAgdGhpcy5fZGVmbGF0ZSA9IGRlZmxhdGVyKGNodW5rID0+IHRoaXMuZGVmbGF0ZWRSZWFkeShjaHVuay5idWZmZXIuc2xpY2UoY2h1bmsuYnl0ZU9mZnNldCwgY2h1bmsuYnl0ZU9mZnNldCArIGNodW5rLmxlbmd0aCkpKVxufVxuXG5Db21wcmVzc29yLnByb3RvdHlwZS5pbmZsYXRlID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICB0aGlzLl9pbmZsYXRlKG5ldyBVaW50OEFycmF5KGJ1ZmZlcikpXG59XG5cbkNvbXByZXNzb3IucHJvdG90eXBlLmRlZmxhdGUgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHRoaXMuX2RlZmxhdGUobmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSlcbn1cblxuZnVuY3Rpb24gZGVmbGF0ZXIgKGVtaXQpIHtcbiAgY29uc3Qgc3RyZWFtID0gbmV3IFpTdHJlYW0oKVxuICBjb25zdCBzdGF0dXMgPSBkZWZsYXRlSW5pdDIoc3RyZWFtLCBaX0RFRkFVTFRfQ09NUFJFU1NJT04sIFpfREVGTEFURUQsIFdJTkRPV19CSVRTLCA4LCBaX0RFRkFVTFRfU1RSQVRFR1kpXG4gIGlmIChzdGF0dXMgIT09IFpfT0spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb2JsZW0gaW5pdGlhbGl6aW5nIGRlZmxhdGUgc3RyZWFtOiAnICsgbWVzc2FnZXNbc3RhdHVzXSlcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHJldHVybiBlbWl0KClcblxuICAgIC8vIEF0dGFjaCB0aGUgaW5wdXQgZGF0YVxuICAgIHN0cmVhbS5pbnB1dCA9IGRhdGFcbiAgICBzdHJlYW0ubmV4dF9pbiA9IDBcbiAgICBzdHJlYW0uYXZhaWxfaW4gPSBzdHJlYW0uaW5wdXQubGVuZ3RoXG5cbiAgICBsZXQgc3RhdHVzXG4gICAgbGV0IG91dHB1dFxuICAgIGxldCBzdGFydFxuICAgIGxldCByZXQgPSB0cnVlXG5cbiAgICBkbyB7XG4gICAgICAvLyBXaGVuIHRoZSBzdHJlYW0gZ2V0cyBmdWxsLCB3ZSBuZWVkIHRvIGNyZWF0ZSBuZXcgc3BhY2UuXG4gICAgICBpZiAoc3RyZWFtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICBzdHJlYW0ub3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkoQ0hVTktfU0laRSlcbiAgICAgICAgc3RhcnQgPSBzdHJlYW0ubmV4dF9vdXQgPSAwXG4gICAgICAgIHN0cmVhbS5hdmFpbF9vdXQgPSBDSFVOS19TSVpFXG4gICAgICB9XG5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGRlZmxhdGVcbiAgICAgIHN0YXR1cyA9IGRlZmxhdGUoc3RyZWFtLCBaX1NZTkNfRkxVU0gpXG4gICAgICBpZiAoc3RhdHVzICE9PSBaX1NUUkVBTV9FTkQgJiYgc3RhdHVzICE9PSBaX09LKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRGVmbGF0ZSBwcm9ibGVtOiAnICsgbWVzc2FnZXNbc3RhdHVzXSlcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIG91dHB1dCBidWZmZXIgZ290IGZ1bGwsIGZsdXNoIHRoZSBkYXRhLlxuICAgICAgaWYgKHN0cmVhbS5hdmFpbF9vdXQgPT09IDAgJiYgc3RyZWFtLm5leHRfb3V0ID4gc3RhcnQpIHtcbiAgICAgICAgb3V0cHV0ID0gc3RyZWFtLm91dHB1dC5zdWJhcnJheShzdGFydCwgc3RhcnQgPSBzdHJlYW0ubmV4dF9vdXQpXG4gICAgICAgIHJldCA9IGVtaXQob3V0cHV0KVxuICAgICAgfVxuICAgIH0gd2hpbGUgKChzdHJlYW0uYXZhaWxfaW4gPiAwIHx8IHN0cmVhbS5hdmFpbF9vdXQgPT09IDApICYmIHN0YXR1cyAhPT0gWl9TVFJFQU1fRU5EKVxuXG4gICAgLy8gRW1pdCB3aGF0ZXZlciBpcyBsZWZ0IGluIG91dHB1dC5cbiAgICBpZiAoc3RyZWFtLm5leHRfb3V0ID4gc3RhcnQpIHtcbiAgICAgIG91dHB1dCA9IHN0cmVhbS5vdXRwdXQuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ID0gc3RyZWFtLm5leHRfb3V0KVxuICAgICAgcmV0ID0gZW1pdChvdXRwdXQpXG4gICAgfVxuICAgIHJldHVybiByZXRcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmZsYXRlciAoZW1pdCkge1xuICBjb25zdCBzdHJlYW0gPSBuZXcgWlN0cmVhbSgpXG5cbiAgY29uc3Qgc3RhdHVzID0gaW5mbGF0ZUluaXQyKHN0cmVhbSwgV0lORE9XX0JJVFMpXG4gIGlmIChzdGF0dXMgIT09IFpfT0spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb2JsZW0gaW5pdGlhbGl6aW5nIGluZmxhdGUgc3RyZWFtOiAnICsgbWVzc2FnZXNbc3RhdHVzXSlcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHJldHVybiBlbWl0KClcblxuICAgIGxldCBzdGFydFxuICAgIHN0cmVhbS5pbnB1dCA9IGRhdGFcbiAgICBzdHJlYW0ubmV4dF9pbiA9IDBcbiAgICBzdHJlYW0uYXZhaWxfaW4gPSBzdHJlYW0uaW5wdXQubGVuZ3RoXG5cbiAgICBsZXQgc3RhdHVzLCBvdXRwdXRcbiAgICBsZXQgcmV0ID0gdHJ1ZVxuXG4gICAgZG8ge1xuICAgICAgaWYgKHN0cmVhbS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgc3RyZWFtLm91dHB1dCA9IG5ldyBVaW50OEFycmF5KENIVU5LX1NJWkUpXG4gICAgICAgIHN0YXJ0ID0gc3RyZWFtLm5leHRfb3V0ID0gMFxuICAgICAgICBzdHJlYW0uYXZhaWxfb3V0ID0gQ0hVTktfU0laRVxuICAgICAgfVxuXG4gICAgICBzdGF0dXMgPSBpbmZsYXRlKHN0cmVhbSwgWl9OT19GTFVTSClcbiAgICAgIGlmIChzdGF0dXMgIT09IFpfU1RSRUFNX0VORCAmJiBzdGF0dXMgIT09IFpfT0spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbmZsYXRlIHByb2JsZW06ICcgKyBtZXNzYWdlc1tzdGF0dXNdKVxuICAgICAgfVxuXG4gICAgICBpZiAoc3RyZWFtLm5leHRfb3V0KSB7XG4gICAgICAgIGlmIChzdHJlYW0uYXZhaWxfb3V0ID09PSAwIHx8IHN0YXR1cyA9PT0gWl9TVFJFQU1fRU5EKSB7XG4gICAgICAgICAgb3V0cHV0ID0gc3RyZWFtLm91dHB1dC5zdWJhcnJheShzdGFydCwgc3RhcnQgPSBzdHJlYW0ubmV4dF9vdXQpXG4gICAgICAgICAgcmV0ID0gZW1pdChvdXRwdXQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IHdoaWxlICgoc3RyZWFtLmF2YWlsX2luID4gMCkgJiYgc3RhdHVzICE9PSBaX1NUUkVBTV9FTkQpXG5cbiAgICBpZiAoc3RyZWFtLm5leHRfb3V0ID4gc3RhcnQpIHtcbiAgICAgIG91dHB1dCA9IHN0cmVhbS5vdXRwdXQuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ID0gc3RyZWFtLm5leHRfb3V0KVxuICAgICAgcmV0ID0gZW1pdChvdXRwdXQpXG4gICAgfVxuXG4gICAgcmV0dXJuIHJldFxuICB9XG59XG4iXX0=