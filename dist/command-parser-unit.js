/* eslint-disable no-unused-expressions */

/* eslint-disable no-useless-escape */
import { parser } from 'emailjs-imap-handler';
import { parseAPPEND, parseCOPY, parseSEARCH, parseNAMESPACE, parseENVELOPE, parseSELECT, parseBODYSTRUCTURE, parseFETCH } from './command-parser';
import { toTypedArray } from './common';
import testEnvelope from '../res/fixtures/envelope';
import mimeTorture from '../res/fixtures/mime-torture-bodystructure';
describe('parseNAMESPACE', function () {
  it('should not succeed for no namespace response', function () {
    expect(parseNAMESPACE({
      payload: {
        NAMESPACE: []
      }
    })).to.be["false"];
  });
  it('should return single personal namespace', function () {
    expect(parseNAMESPACE({
      payload: {
        NAMESPACE: [{
          attributes: [[[{
            type: 'STRING',
            value: 'INBOX.'
          }, {
            type: 'STRING',
            value: '.'
          }]], null, null]
        }]
      }
    })).to.deep.equal({
      personal: [{
        prefix: 'INBOX.',
        delimiter: '.'
      }],
      users: false,
      shared: false
    });
  });
  it('should return single personal, single users, multiple shared', function () {
    expect(parseNAMESPACE({
      payload: {
        NAMESPACE: [{
          attributes: [// personal
          [[{
            type: 'STRING',
            value: ''
          }, {
            type: 'STRING',
            value: '/'
          }]], // users
          [[{
            type: 'STRING',
            value: '~'
          }, {
            type: 'STRING',
            value: '/'
          }]], // shared
          [[{
            type: 'STRING',
            value: '#shared/'
          }, {
            type: 'STRING',
            value: '/'
          }], [{
            type: 'STRING',
            value: '#public/'
          }, {
            type: 'STRING',
            value: '/'
          }]]]
        }]
      }
    })).to.deep.equal({
      personal: [{
        prefix: '',
        delimiter: '/'
      }],
      users: [{
        prefix: '~',
        delimiter: '/'
      }],
      shared: [{
        prefix: '#shared/',
        delimiter: '/'
      }, {
        prefix: '#public/',
        delimiter: '/'
      }]
    });
  });
  it('should handle NIL namespace hierarchy delim', function () {
    expect(parseNAMESPACE({
      payload: {
        NAMESPACE: [// This specific value is returned by yahoo.co.jp's
        // imapgate version 0.7.68_11_1.61475 IMAP server
        parser(toTypedArray('* NAMESPACE (("" NIL)) NIL NIL'))]
      }
    })).to.deep.equal({
      personal: [{
        prefix: '',
        delimiter: null
      }],
      users: false,
      shared: false
    });
  });
});
describe('parseSELECT', function () {
  it('should parse a complete response', function () {
    expect(parseSELECT({
      code: 'READ-WRITE',
      payload: {
        EXISTS: [{
          nr: 123
        }],
        FLAGS: [{
          attributes: [[{
            type: 'ATOM',
            value: '\\Answered'
          }, {
            type: 'ATOM',
            value: '\\Flagged'
          }]]
        }],
        OK: [{
          code: 'PERMANENTFLAGS',
          permanentflags: ['\\Answered', '\\Flagged']
        }, {
          code: 'UIDVALIDITY',
          uidvalidity: '2'
        }, {
          code: 'UIDNEXT',
          uidnext: '38361'
        }, {
          code: 'HIGHESTMODSEQ',
          highestmodseq: '3682918'
        }]
      }
    })).to.deep.equal({
      exists: 123,
      flags: ['\\Answered', '\\Flagged'],
      highestModseq: '3682918',
      permanentFlags: ['\\Answered', '\\Flagged'],
      readOnly: false,
      uidNext: 38361,
      uidValidity: 2
    });
  });
  it('should parse response with no modseq', function () {
    expect(parseSELECT({
      code: 'READ-WRITE',
      payload: {
        EXISTS: [{
          nr: 123
        }],
        FLAGS: [{
          attributes: [[{
            type: 'ATOM',
            value: '\\Answered'
          }, {
            type: 'ATOM',
            value: '\\Flagged'
          }]]
        }],
        OK: [{
          code: 'PERMANENTFLAGS',
          permanentflags: ['\\Answered', '\\Flagged']
        }, {
          code: 'UIDVALIDITY',
          uidvalidity: '2'
        }, {
          code: 'UIDNEXT',
          uidnext: '38361'
        }]
      }
    })).to.deep.equal({
      exists: 123,
      flags: ['\\Answered', '\\Flagged'],
      permanentFlags: ['\\Answered', '\\Flagged'],
      readOnly: false,
      uidNext: 38361,
      uidValidity: 2
    });
  });
  it('should parse response with read-only', function () {
    expect(parseSELECT({
      code: 'READ-ONLY',
      payload: {
        EXISTS: [{
          nr: 123
        }],
        FLAGS: [{
          attributes: [[{
            type: 'ATOM',
            value: '\\Answered'
          }, {
            type: 'ATOM',
            value: '\\Flagged'
          }]]
        }],
        OK: [{
          code: 'PERMANENTFLAGS',
          permanentflags: ['\\Answered', '\\Flagged']
        }, {
          code: 'UIDVALIDITY',
          uidvalidity: '2'
        }, {
          code: 'UIDNEXT',
          uidnext: '38361'
        }]
      }
    })).to.deep.equal({
      exists: 123,
      flags: ['\\Answered', '\\Flagged'],
      permanentFlags: ['\\Answered', '\\Flagged'],
      readOnly: true,
      uidNext: 38361,
      uidValidity: 2
    });
  });
  it('should parse response with NOMODSEQ flag', function () {
    expect(parseSELECT({
      code: 'READ-WRITE',
      payload: {
        EXISTS: [{
          nr: 123
        }],
        FLAGS: [{
          attributes: [[{
            type: 'ATOM',
            value: '\\Answered'
          }, {
            type: 'ATOM',
            value: '\\Flagged'
          }]]
        }],
        OK: [{
          code: 'PERMANENTFLAGS',
          permanentflags: ['\\Answered', '\\Flagged']
        }, {
          code: 'UIDVALIDITY',
          uidvalidity: '2'
        }, {
          code: 'UIDNEXT',
          uidnext: '38361'
        }, {
          code: 'NOMODSEQ'
        }]
      }
    })).to.deep.equal({
      exists: 123,
      flags: ['\\Answered', '\\Flagged'],
      permanentFlags: ['\\Answered', '\\Flagged'],
      readOnly: false,
      uidNext: 38361,
      uidValidity: 2,
      noModseq: true
    });
  });
});
describe('parseENVELOPE', function () {
  it('should parsed envelope object', function () {
    expect(parseENVELOPE(testEnvelope.source)).to.deep.equal(testEnvelope.parsed);
  });
});
describe('parseBODYSTRUCTURE', function () {
  it('should parse bodystructure object', function () {
    expect(parseBODYSTRUCTURE(mimeTorture.source)).to.deep.equal(mimeTorture.parsed);
  });
  it('should parse bodystructure with unicode filename', function () {
    var input = [[{
      type: 'STRING',
      value: 'APPLICATION'
    }, {
      type: 'STRING',
      value: 'OCTET-STREAM'
    }, null, null, null, {
      type: 'STRING',
      value: 'BASE64'
    }, {
      type: 'ATOM',
      value: '40'
    }, null, [{
      type: 'STRING',
      value: 'ATTACHMENT'
    }, [{
      type: 'STRING',
      value: 'FILENAME'
    }, {
      type: 'STRING',
      value: '=?ISO-8859-1?Q?BBR_Handel,_Gewerbe,_B=FCrobetriebe,?= =?ISO-8859-1?Q?_private_Bildungseinrichtungen.txt?='
    }]], null], {
      type: 'STRING',
      value: 'MIXED'
    }, [{
      type: 'STRING',
      value: 'BOUNDARY'
    }, {
      type: 'STRING',
      value: '----sinikael-?=_1-14105085265110.49903922458179295'
    }], null, null];
    var expected = {
      childNodes: [{
        part: '1',
        type: 'application/octet-stream',
        encoding: 'base64',
        size: 40,
        disposition: 'attachment',
        dispositionParameters: {
          filename: 'BBR Handel, Gewerbe, BÃ¼robetriebe, private Bildungseinrichtungen.txt'
        }
      }],
      type: 'multipart/mixed',
      parameters: {
        boundary: '----sinikael-?=_1-14105085265110.49903922458179295'
      }
    };
    expect(parseBODYSTRUCTURE(input)).to.deep.equal(expected);
  });
});
describe('parseFETCH', function () {
  it('should return values lowercase keys', function () {
    expect(parseFETCH({
      payload: {
        FETCH: [{
          nr: 123,
          attributes: [[{
            type: 'ATOM',
            value: 'BODY',
            section: [{
              type: 'ATOM',
              value: 'HEADER'
            }, [{
              type: 'ATOM',
              value: 'DATE'
            }, {
              type: 'ATOM',
              value: 'SUBJECT'
            }]],
            partial: [0, 123]
          }, {
            type: 'ATOM',
            value: 'abc'
          }]]
        }]
      }
    })).to.deep.equal([{
      '#': 123,
      'body[header (date subject)]<0.123>': 'abc'
    }]);
  });
  it('should merge multiple responses based on sequence number', function () {
    expect(parseFETCH({
      payload: {
        FETCH: [{
          nr: 123,
          attributes: [[{
            type: 'ATOM',
            value: 'UID'
          }, {
            type: 'ATOM',
            value: 789
          }]]
        }, {
          nr: 124,
          attributes: [[{
            type: 'ATOM',
            value: 'UID'
          }, {
            type: 'ATOM',
            value: 790
          }]]
        }, {
          nr: 123,
          attributes: [[{
            type: 'ATOM',
            value: 'MODSEQ'
          }, {
            type: 'ATOM',
            value: '127'
          }]]
        }]
      }
    })).to.deep.equal([{
      '#': 123,
      uid: 789,
      modseq: '127'
    }, {
      '#': 124,
      uid: 790
    }]);
  });
});
describe('parseSEARCH', function () {
  it('should parse SEARCH response', function () {
    expect(parseSEARCH({
      payload: {
        SEARCH: [{
          attributes: [{
            value: 5
          }, {
            value: 7
          }]
        }, {
          attributes: [{
            value: 6
          }]
        }]
      }
    })).to.deep.equal([5, 6, 7]);
  });
  it('should parse empty SEARCH response', function () {
    expect(parseSEARCH({
      payload: {
        SEARCH: [{
          command: 'SEARCH',
          tag: '*'
        }]
      }
    })).to.deep.equal([]);
  });
});
describe('parseCOPY', function () {
  it('should parse COPY response', function () {
    expect(parseCOPY({
      copyuid: ['1', '1:3', '3,4,2']
    })).to.deep.equal({
      srcSeqSet: '1:3',
      destSeqSet: '3,4,2'
    });
  });
  it('should return undefined when response does not contain copyuid', function () {
    expect(parseCOPY({})).to.equal(undefined);
  });
  it('should return undefined when response is not defined', function () {
    expect(parseCOPY()).to.equal(undefined);
  });
});
describe('parseAPPEND', function () {
  it('should parse APPEND response', function () {
    expect(parseAPPEND({
      appenduid: ['1', '3']
    })).to.equal('3');
  });
  it('should return undefined when response does not contain copyuid', function () {
    expect(parseAPPEND({})).to.equal(undefined);
  });
  it('should return undefined when response is not defined', function () {
    expect(parseAPPEND()).to.equal(undefined);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tYW5kLXBhcnNlci11bml0LmpzIl0sIm5hbWVzIjpbInBhcnNlciIsInBhcnNlQVBQRU5EIiwicGFyc2VDT1BZIiwicGFyc2VTRUFSQ0giLCJwYXJzZU5BTUVTUEFDRSIsInBhcnNlRU5WRUxPUEUiLCJwYXJzZVNFTEVDVCIsInBhcnNlQk9EWVNUUlVDVFVSRSIsInBhcnNlRkVUQ0giLCJ0b1R5cGVkQXJyYXkiLCJ0ZXN0RW52ZWxvcGUiLCJtaW1lVG9ydHVyZSIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJwYXlsb2FkIiwiTkFNRVNQQUNFIiwidG8iLCJiZSIsImF0dHJpYnV0ZXMiLCJ0eXBlIiwidmFsdWUiLCJkZWVwIiwiZXF1YWwiLCJwZXJzb25hbCIsInByZWZpeCIsImRlbGltaXRlciIsInVzZXJzIiwic2hhcmVkIiwiY29kZSIsIkVYSVNUUyIsIm5yIiwiRkxBR1MiLCJPSyIsInBlcm1hbmVudGZsYWdzIiwidWlkdmFsaWRpdHkiLCJ1aWRuZXh0IiwiaGlnaGVzdG1vZHNlcSIsImV4aXN0cyIsImZsYWdzIiwiaGlnaGVzdE1vZHNlcSIsInBlcm1hbmVudEZsYWdzIiwicmVhZE9ubHkiLCJ1aWROZXh0IiwidWlkVmFsaWRpdHkiLCJub01vZHNlcSIsInNvdXJjZSIsInBhcnNlZCIsImlucHV0IiwiZXhwZWN0ZWQiLCJjaGlsZE5vZGVzIiwicGFydCIsImVuY29kaW5nIiwic2l6ZSIsImRpc3Bvc2l0aW9uIiwiZGlzcG9zaXRpb25QYXJhbWV0ZXJzIiwiZmlsZW5hbWUiLCJwYXJhbWV0ZXJzIiwiYm91bmRhcnkiLCJGRVRDSCIsInNlY3Rpb24iLCJwYXJ0aWFsIiwidWlkIiwibW9kc2VxIiwiU0VBUkNIIiwiY29tbWFuZCIsInRhZyIsImNvcHl1aWQiLCJzcmNTZXFTZXQiLCJkZXN0U2VxU2V0IiwidW5kZWZpbmVkIiwiYXBwZW5kdWlkIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUVBLFNBQVNBLE1BQVQsUUFBdUIsc0JBQXZCO0FBQ0EsU0FDRUMsV0FERixFQUVFQyxTQUZGLEVBR0VDLFdBSEYsRUFJRUMsY0FKRixFQUtFQyxhQUxGLEVBTUVDLFdBTkYsRUFPRUMsa0JBUEYsRUFRRUMsVUFSRixRQVNPLGtCQVRQO0FBVUEsU0FBU0MsWUFBVCxRQUE2QixVQUE3QjtBQUNBLE9BQU9DLFlBQVAsTUFBeUIsMEJBQXpCO0FBQ0EsT0FBT0MsV0FBUCxNQUF3Qiw0Q0FBeEI7QUFFQUMsUUFBUSxDQUFDLGdCQUFELEVBQW1CLFlBQU07QUFDL0JDLEVBQUFBLEVBQUUsQ0FBQyw4Q0FBRCxFQUFpRCxZQUFNO0FBQ3ZEQyxJQUFBQSxNQUFNLENBQUNWLGNBQWMsQ0FBQztBQUNwQlcsTUFBQUEsT0FBTyxFQUFFO0FBQ1BDLFFBQUFBLFNBQVMsRUFBRTtBQURKO0FBRFcsS0FBRCxDQUFmLENBQU4sQ0FJSUMsRUFKSixDQUlPQyxFQUpQO0FBS0QsR0FOQyxDQUFGO0FBUUFMLEVBQUFBLEVBQUUsQ0FBQyx5Q0FBRCxFQUE0QyxZQUFNO0FBQ2xEQyxJQUFBQSxNQUFNLENBQUNWLGNBQWMsQ0FBQztBQUNwQlcsTUFBQUEsT0FBTyxFQUFFO0FBQ1BDLFFBQUFBLFNBQVMsRUFBRSxDQUFDO0FBQ1ZHLFVBQUFBLFVBQVUsRUFBRSxDQUNWLENBQ0UsQ0FBQztBQUNDQyxZQUFBQSxJQUFJLEVBQUUsUUFEUDtBQUVDQyxZQUFBQSxLQUFLLEVBQUU7QUFGUixXQUFELEVBR0c7QUFDREQsWUFBQUEsSUFBSSxFQUFFLFFBREw7QUFFREMsWUFBQUEsS0FBSyxFQUFFO0FBRk4sV0FISCxDQURGLENBRFUsRUFTUCxJQVRPLEVBU0QsSUFUQztBQURGLFNBQUQ7QUFESjtBQURXLEtBQUQsQ0FBZixDQUFOLENBZ0JJSixFQWhCSixDQWdCT0ssSUFoQlAsQ0FnQllDLEtBaEJaLENBZ0JrQjtBQUNoQkMsTUFBQUEsUUFBUSxFQUFFLENBQUM7QUFDVEMsUUFBQUEsTUFBTSxFQUFFLFFBREM7QUFFVEMsUUFBQUEsU0FBUyxFQUFFO0FBRkYsT0FBRCxDQURNO0FBS2hCQyxNQUFBQSxLQUFLLEVBQUUsS0FMUztBQU1oQkMsTUFBQUEsTUFBTSxFQUFFO0FBTlEsS0FoQmxCO0FBd0JELEdBekJDLENBQUY7QUEyQkFmLEVBQUFBLEVBQUUsQ0FBQyw4REFBRCxFQUFpRSxZQUFNO0FBQ3ZFQyxJQUFBQSxNQUFNLENBQUNWLGNBQWMsQ0FBQztBQUNwQlcsTUFBQUEsT0FBTyxFQUFFO0FBQ1BDLFFBQUFBLFNBQVMsRUFBRSxDQUFDO0FBQ1ZHLFVBQUFBLFVBQVUsRUFBRSxDQUNWO0FBQ0EsV0FDRSxDQUFDO0FBQ0NDLFlBQUFBLElBQUksRUFBRSxRQURQO0FBRUNDLFlBQUFBLEtBQUssRUFBRTtBQUZSLFdBQUQsRUFHRztBQUNERCxZQUFBQSxJQUFJLEVBQUUsUUFETDtBQUVEQyxZQUFBQSxLQUFLLEVBQUU7QUFGTixXQUhILENBREYsQ0FGVSxFQVdWO0FBQ0EsV0FDRSxDQUFDO0FBQ0NELFlBQUFBLElBQUksRUFBRSxRQURQO0FBRUNDLFlBQUFBLEtBQUssRUFBRTtBQUZSLFdBQUQsRUFHRztBQUNERCxZQUFBQSxJQUFJLEVBQUUsUUFETDtBQUVEQyxZQUFBQSxLQUFLLEVBQUU7QUFGTixXQUhILENBREYsQ0FaVSxFQXFCVjtBQUNBLFdBQ0UsQ0FBQztBQUNDRCxZQUFBQSxJQUFJLEVBQUUsUUFEUDtBQUVDQyxZQUFBQSxLQUFLLEVBQUU7QUFGUixXQUFELEVBR0c7QUFDREQsWUFBQUEsSUFBSSxFQUFFLFFBREw7QUFFREMsWUFBQUEsS0FBSyxFQUFFO0FBRk4sV0FISCxDQURGLEVBUUUsQ0FBQztBQUNDRCxZQUFBQSxJQUFJLEVBQUUsUUFEUDtBQUVDQyxZQUFBQSxLQUFLLEVBQUU7QUFGUixXQUFELEVBR0c7QUFDREQsWUFBQUEsSUFBSSxFQUFFLFFBREw7QUFFREMsWUFBQUEsS0FBSyxFQUFFO0FBRk4sV0FISCxDQVJGLENBdEJVO0FBREYsU0FBRDtBQURKO0FBRFcsS0FBRCxDQUFmLENBQU4sQ0E0Q0lKLEVBNUNKLENBNENPSyxJQTVDUCxDQTRDWUMsS0E1Q1osQ0E0Q2tCO0FBQ2hCQyxNQUFBQSxRQUFRLEVBQUUsQ0FBQztBQUNUQyxRQUFBQSxNQUFNLEVBQUUsRUFEQztBQUVUQyxRQUFBQSxTQUFTLEVBQUU7QUFGRixPQUFELENBRE07QUFLaEJDLE1BQUFBLEtBQUssRUFBRSxDQUFDO0FBQ05GLFFBQUFBLE1BQU0sRUFBRSxHQURGO0FBRU5DLFFBQUFBLFNBQVMsRUFBRTtBQUZMLE9BQUQsQ0FMUztBQVNoQkUsTUFBQUEsTUFBTSxFQUFFLENBQUM7QUFDUEgsUUFBQUEsTUFBTSxFQUFFLFVBREQ7QUFFUEMsUUFBQUEsU0FBUyxFQUFFO0FBRkosT0FBRCxFQUdMO0FBQ0RELFFBQUFBLE1BQU0sRUFBRSxVQURQO0FBRURDLFFBQUFBLFNBQVMsRUFBRTtBQUZWLE9BSEs7QUFUUSxLQTVDbEI7QUE2REQsR0E5REMsQ0FBRjtBQWdFQWIsRUFBQUEsRUFBRSxDQUFDLDZDQUFELEVBQWdELFlBQU07QUFDdERDLElBQUFBLE1BQU0sQ0FBQ1YsY0FBYyxDQUFDO0FBQ3BCVyxNQUFBQSxPQUFPLEVBQUU7QUFDUEMsUUFBQUEsU0FBUyxFQUFFLENBQ1Q7QUFDQTtBQUNBaEIsUUFBQUEsTUFBTSxDQUFDUyxZQUFZLENBQUMsZ0NBQUQsQ0FBYixDQUhHO0FBREo7QUFEVyxLQUFELENBQWYsQ0FBTixDQVFJUSxFQVJKLENBUU9LLElBUlAsQ0FRWUMsS0FSWixDQVFrQjtBQUNoQkMsTUFBQUEsUUFBUSxFQUFFLENBQUM7QUFDVEMsUUFBQUEsTUFBTSxFQUFFLEVBREM7QUFFVEMsUUFBQUEsU0FBUyxFQUFFO0FBRkYsT0FBRCxDQURNO0FBS2hCQyxNQUFBQSxLQUFLLEVBQUUsS0FMUztBQU1oQkMsTUFBQUEsTUFBTSxFQUFFO0FBTlEsS0FSbEI7QUFnQkQsR0FqQkMsQ0FBRjtBQWtCRCxDQXRITyxDQUFSO0FBd0hBaEIsUUFBUSxDQUFDLGFBQUQsRUFBZ0IsWUFBTTtBQUM1QkMsRUFBQUEsRUFBRSxDQUFDLGtDQUFELEVBQXFDLFlBQU07QUFDM0NDLElBQUFBLE1BQU0sQ0FBQ1IsV0FBVyxDQUFDO0FBQ2pCdUIsTUFBQUEsSUFBSSxFQUFFLFlBRFc7QUFFakJkLE1BQUFBLE9BQU8sRUFBRTtBQUNQZSxRQUFBQSxNQUFNLEVBQUUsQ0FBQztBQUNQQyxVQUFBQSxFQUFFLEVBQUU7QUFERyxTQUFELENBREQ7QUFJUEMsUUFBQUEsS0FBSyxFQUFFLENBQUM7QUFDTmIsVUFBQUEsVUFBVSxFQUFFLENBQ1YsQ0FBQztBQUNDQyxZQUFBQSxJQUFJLEVBQUUsTUFEUDtBQUVDQyxZQUFBQSxLQUFLLEVBQUU7QUFGUixXQUFELEVBR0c7QUFDREQsWUFBQUEsSUFBSSxFQUFFLE1BREw7QUFFREMsWUFBQUEsS0FBSyxFQUFFO0FBRk4sV0FISCxDQURVO0FBRE4sU0FBRCxDQUpBO0FBZVBZLFFBQUFBLEVBQUUsRUFBRSxDQUFDO0FBQ0hKLFVBQUFBLElBQUksRUFBRSxnQkFESDtBQUVISyxVQUFBQSxjQUFjLEVBQUUsQ0FBQyxZQUFELEVBQWUsV0FBZjtBQUZiLFNBQUQsRUFHRDtBQUNETCxVQUFBQSxJQUFJLEVBQUUsYUFETDtBQUVETSxVQUFBQSxXQUFXLEVBQUU7QUFGWixTQUhDLEVBTUQ7QUFDRE4sVUFBQUEsSUFBSSxFQUFFLFNBREw7QUFFRE8sVUFBQUEsT0FBTyxFQUFFO0FBRlIsU0FOQyxFQVNEO0FBQ0RQLFVBQUFBLElBQUksRUFBRSxlQURMO0FBRURRLFVBQUFBLGFBQWEsRUFBRTtBQUZkLFNBVEM7QUFmRztBQUZRLEtBQUQsQ0FBWixDQUFOLENBK0JJcEIsRUEvQkosQ0ErQk9LLElBL0JQLENBK0JZQyxLQS9CWixDQStCa0I7QUFDaEJlLE1BQUFBLE1BQU0sRUFBRSxHQURRO0FBRWhCQyxNQUFBQSxLQUFLLEVBQUUsQ0FBQyxZQUFELEVBQWUsV0FBZixDQUZTO0FBR2hCQyxNQUFBQSxhQUFhLEVBQUUsU0FIQztBQUloQkMsTUFBQUEsY0FBYyxFQUFFLENBQUMsWUFBRCxFQUFlLFdBQWYsQ0FKQTtBQUtoQkMsTUFBQUEsUUFBUSxFQUFFLEtBTE07QUFNaEJDLE1BQUFBLE9BQU8sRUFBRSxLQU5PO0FBT2hCQyxNQUFBQSxXQUFXLEVBQUU7QUFQRyxLQS9CbEI7QUF3Q0QsR0F6Q0MsQ0FBRjtBQTJDQS9CLEVBQUFBLEVBQUUsQ0FBQyxzQ0FBRCxFQUF5QyxZQUFNO0FBQy9DQyxJQUFBQSxNQUFNLENBQUNSLFdBQVcsQ0FBQztBQUNqQnVCLE1BQUFBLElBQUksRUFBRSxZQURXO0FBRWpCZCxNQUFBQSxPQUFPLEVBQUU7QUFDUGUsUUFBQUEsTUFBTSxFQUFFLENBQUM7QUFDUEMsVUFBQUEsRUFBRSxFQUFFO0FBREcsU0FBRCxDQUREO0FBSVBDLFFBQUFBLEtBQUssRUFBRSxDQUFDO0FBQ05iLFVBQUFBLFVBQVUsRUFBRSxDQUNWLENBQUM7QUFDQ0MsWUFBQUEsSUFBSSxFQUFFLE1BRFA7QUFFQ0MsWUFBQUEsS0FBSyxFQUFFO0FBRlIsV0FBRCxFQUdHO0FBQ0RELFlBQUFBLElBQUksRUFBRSxNQURMO0FBRURDLFlBQUFBLEtBQUssRUFBRTtBQUZOLFdBSEgsQ0FEVTtBQUROLFNBQUQsQ0FKQTtBQWVQWSxRQUFBQSxFQUFFLEVBQUUsQ0FBQztBQUNISixVQUFBQSxJQUFJLEVBQUUsZ0JBREg7QUFFSEssVUFBQUEsY0FBYyxFQUFFLENBQUMsWUFBRCxFQUFlLFdBQWY7QUFGYixTQUFELEVBR0Q7QUFDREwsVUFBQUEsSUFBSSxFQUFFLGFBREw7QUFFRE0sVUFBQUEsV0FBVyxFQUFFO0FBRlosU0FIQyxFQU1EO0FBQ0ROLFVBQUFBLElBQUksRUFBRSxTQURMO0FBRURPLFVBQUFBLE9BQU8sRUFBRTtBQUZSLFNBTkM7QUFmRztBQUZRLEtBQUQsQ0FBWixDQUFOLENBNEJJbkIsRUE1QkosQ0E0Qk9LLElBNUJQLENBNEJZQyxLQTVCWixDQTRCa0I7QUFDaEJlLE1BQUFBLE1BQU0sRUFBRSxHQURRO0FBRWhCQyxNQUFBQSxLQUFLLEVBQUUsQ0FBQyxZQUFELEVBQWUsV0FBZixDQUZTO0FBR2hCRSxNQUFBQSxjQUFjLEVBQUUsQ0FBQyxZQUFELEVBQWUsV0FBZixDQUhBO0FBSWhCQyxNQUFBQSxRQUFRLEVBQUUsS0FKTTtBQUtoQkMsTUFBQUEsT0FBTyxFQUFFLEtBTE87QUFNaEJDLE1BQUFBLFdBQVcsRUFBRTtBQU5HLEtBNUJsQjtBQW9DRCxHQXJDQyxDQUFGO0FBdUNBL0IsRUFBQUEsRUFBRSxDQUFDLHNDQUFELEVBQXlDLFlBQU07QUFDL0NDLElBQUFBLE1BQU0sQ0FBQ1IsV0FBVyxDQUFDO0FBQ2pCdUIsTUFBQUEsSUFBSSxFQUFFLFdBRFc7QUFFakJkLE1BQUFBLE9BQU8sRUFBRTtBQUNQZSxRQUFBQSxNQUFNLEVBQUUsQ0FBQztBQUNQQyxVQUFBQSxFQUFFLEVBQUU7QUFERyxTQUFELENBREQ7QUFJUEMsUUFBQUEsS0FBSyxFQUFFLENBQUM7QUFDTmIsVUFBQUEsVUFBVSxFQUFFLENBQ1YsQ0FBQztBQUNDQyxZQUFBQSxJQUFJLEVBQUUsTUFEUDtBQUVDQyxZQUFBQSxLQUFLLEVBQUU7QUFGUixXQUFELEVBR0c7QUFDREQsWUFBQUEsSUFBSSxFQUFFLE1BREw7QUFFREMsWUFBQUEsS0FBSyxFQUFFO0FBRk4sV0FISCxDQURVO0FBRE4sU0FBRCxDQUpBO0FBZVBZLFFBQUFBLEVBQUUsRUFBRSxDQUFDO0FBQ0hKLFVBQUFBLElBQUksRUFBRSxnQkFESDtBQUVISyxVQUFBQSxjQUFjLEVBQUUsQ0FBQyxZQUFELEVBQWUsV0FBZjtBQUZiLFNBQUQsRUFHRDtBQUNETCxVQUFBQSxJQUFJLEVBQUUsYUFETDtBQUVETSxVQUFBQSxXQUFXLEVBQUU7QUFGWixTQUhDLEVBTUQ7QUFDRE4sVUFBQUEsSUFBSSxFQUFFLFNBREw7QUFFRE8sVUFBQUEsT0FBTyxFQUFFO0FBRlIsU0FOQztBQWZHO0FBRlEsS0FBRCxDQUFaLENBQU4sQ0E0QkluQixFQTVCSixDQTRCT0ssSUE1QlAsQ0E0QllDLEtBNUJaLENBNEJrQjtBQUNoQmUsTUFBQUEsTUFBTSxFQUFFLEdBRFE7QUFFaEJDLE1BQUFBLEtBQUssRUFBRSxDQUFDLFlBQUQsRUFBZSxXQUFmLENBRlM7QUFHaEJFLE1BQUFBLGNBQWMsRUFBRSxDQUFDLFlBQUQsRUFBZSxXQUFmLENBSEE7QUFJaEJDLE1BQUFBLFFBQVEsRUFBRSxJQUpNO0FBS2hCQyxNQUFBQSxPQUFPLEVBQUUsS0FMTztBQU1oQkMsTUFBQUEsV0FBVyxFQUFFO0FBTkcsS0E1QmxCO0FBb0NELEdBckNDLENBQUY7QUF1Q0EvQixFQUFBQSxFQUFFLENBQUMsMENBQUQsRUFBNkMsWUFBTTtBQUNuREMsSUFBQUEsTUFBTSxDQUFDUixXQUFXLENBQUM7QUFDakJ1QixNQUFBQSxJQUFJLEVBQUUsWUFEVztBQUVqQmQsTUFBQUEsT0FBTyxFQUFFO0FBQ1BlLFFBQUFBLE1BQU0sRUFBRSxDQUFDO0FBQ1BDLFVBQUFBLEVBQUUsRUFBRTtBQURHLFNBQUQsQ0FERDtBQUlQQyxRQUFBQSxLQUFLLEVBQUUsQ0FBQztBQUNOYixVQUFBQSxVQUFVLEVBQUUsQ0FDVixDQUFDO0FBQ0NDLFlBQUFBLElBQUksRUFBRSxNQURQO0FBRUNDLFlBQUFBLEtBQUssRUFBRTtBQUZSLFdBQUQsRUFHRztBQUNERCxZQUFBQSxJQUFJLEVBQUUsTUFETDtBQUVEQyxZQUFBQSxLQUFLLEVBQUU7QUFGTixXQUhILENBRFU7QUFETixTQUFELENBSkE7QUFlUFksUUFBQUEsRUFBRSxFQUFFLENBQUM7QUFDSEosVUFBQUEsSUFBSSxFQUFFLGdCQURIO0FBRUhLLFVBQUFBLGNBQWMsRUFBRSxDQUFDLFlBQUQsRUFBZSxXQUFmO0FBRmIsU0FBRCxFQUdEO0FBQ0RMLFVBQUFBLElBQUksRUFBRSxhQURMO0FBRURNLFVBQUFBLFdBQVcsRUFBRTtBQUZaLFNBSEMsRUFNRDtBQUNETixVQUFBQSxJQUFJLEVBQUUsU0FETDtBQUVETyxVQUFBQSxPQUFPLEVBQUU7QUFGUixTQU5DLEVBU0Q7QUFDRFAsVUFBQUEsSUFBSSxFQUFFO0FBREwsU0FUQztBQWZHO0FBRlEsS0FBRCxDQUFaLENBQU4sQ0E4QklaLEVBOUJKLENBOEJPSyxJQTlCUCxDQThCWUMsS0E5QlosQ0E4QmtCO0FBQ2hCZSxNQUFBQSxNQUFNLEVBQUUsR0FEUTtBQUVoQkMsTUFBQUEsS0FBSyxFQUFFLENBQUMsWUFBRCxFQUFlLFdBQWYsQ0FGUztBQUdoQkUsTUFBQUEsY0FBYyxFQUFFLENBQUMsWUFBRCxFQUFlLFdBQWYsQ0FIQTtBQUloQkMsTUFBQUEsUUFBUSxFQUFFLEtBSk07QUFLaEJDLE1BQUFBLE9BQU8sRUFBRSxLQUxPO0FBTWhCQyxNQUFBQSxXQUFXLEVBQUUsQ0FORztBQU9oQkMsTUFBQUEsUUFBUSxFQUFFO0FBUE0sS0E5QmxCO0FBdUNELEdBeENDLENBQUY7QUF5Q0QsQ0FuS08sQ0FBUjtBQXFLQWpDLFFBQVEsQ0FBQyxlQUFELEVBQWtCLFlBQU07QUFDOUJDLEVBQUFBLEVBQUUsQ0FBQywrQkFBRCxFQUFrQyxZQUFNO0FBQ3hDQyxJQUFBQSxNQUFNLENBQUNULGFBQWEsQ0FBQ0ssWUFBWSxDQUFDb0MsTUFBZCxDQUFkLENBQU4sQ0FBMkM3QixFQUEzQyxDQUE4Q0ssSUFBOUMsQ0FBbURDLEtBQW5ELENBQXlEYixZQUFZLENBQUNxQyxNQUF0RTtBQUNELEdBRkMsQ0FBRjtBQUdELENBSk8sQ0FBUjtBQU1BbkMsUUFBUSxDQUFDLG9CQUFELEVBQXVCLFlBQU07QUFDbkNDLEVBQUFBLEVBQUUsQ0FBQyxtQ0FBRCxFQUFzQyxZQUFNO0FBQzVDQyxJQUFBQSxNQUFNLENBQUNQLGtCQUFrQixDQUFDSSxXQUFXLENBQUNtQyxNQUFiLENBQW5CLENBQU4sQ0FBK0M3QixFQUEvQyxDQUFrREssSUFBbEQsQ0FBdURDLEtBQXZELENBQTZEWixXQUFXLENBQUNvQyxNQUF6RTtBQUNELEdBRkMsQ0FBRjtBQUlBbEMsRUFBQUEsRUFBRSxDQUFDLGtEQUFELEVBQXFELFlBQU07QUFDM0QsUUFBSW1DLEtBQUssR0FBRyxDQUNWLENBQ0U7QUFBRTVCLE1BQUFBLElBQUksRUFBRSxRQUFSO0FBQWtCQyxNQUFBQSxLQUFLLEVBQUU7QUFBekIsS0FERixFQUVFO0FBQUVELE1BQUFBLElBQUksRUFBRSxRQUFSO0FBQWtCQyxNQUFBQSxLQUFLLEVBQUU7QUFBekIsS0FGRixFQUdFLElBSEYsRUFJRSxJQUpGLEVBS0UsSUFMRixFQU1FO0FBQUVELE1BQUFBLElBQUksRUFBRSxRQUFSO0FBQWtCQyxNQUFBQSxLQUFLLEVBQUU7QUFBekIsS0FORixFQU9FO0FBQUVELE1BQUFBLElBQUksRUFBRSxNQUFSO0FBQWdCQyxNQUFBQSxLQUFLLEVBQUU7QUFBdkIsS0FQRixFQVFFLElBUkYsRUFTRSxDQUNFO0FBQUVELE1BQUFBLElBQUksRUFBRSxRQUFSO0FBQWtCQyxNQUFBQSxLQUFLLEVBQUU7QUFBekIsS0FERixFQUVFLENBQ0U7QUFBRUQsTUFBQUEsSUFBSSxFQUFFLFFBQVI7QUFBa0JDLE1BQUFBLEtBQUssRUFBRTtBQUF6QixLQURGLEVBRUU7QUFBRUQsTUFBQUEsSUFBSSxFQUFFLFFBQVI7QUFBa0JDLE1BQUFBLEtBQUssRUFBRTtBQUF6QixLQUZGLENBRkYsQ0FURixFQWdCRSxJQWhCRixDQURVLEVBbUJWO0FBQUVELE1BQUFBLElBQUksRUFBRSxRQUFSO0FBQWtCQyxNQUFBQSxLQUFLLEVBQUU7QUFBekIsS0FuQlUsRUFvQlYsQ0FDRTtBQUFFRCxNQUFBQSxJQUFJLEVBQUUsUUFBUjtBQUFrQkMsTUFBQUEsS0FBSyxFQUFFO0FBQXpCLEtBREYsRUFFRTtBQUFFRCxNQUFBQSxJQUFJLEVBQUUsUUFBUjtBQUFrQkMsTUFBQUEsS0FBSyxFQUFFO0FBQXpCLEtBRkYsQ0FwQlUsRUF3QlYsSUF4QlUsRUF5QlYsSUF6QlUsQ0FBWjtBQTRCQSxRQUFJNEIsUUFBUSxHQUFHO0FBQ2JDLE1BQUFBLFVBQVUsRUFBRSxDQUFDO0FBQ1hDLFFBQUFBLElBQUksRUFBRSxHQURLO0FBRVgvQixRQUFBQSxJQUFJLEVBQUUsMEJBRks7QUFHWGdDLFFBQUFBLFFBQVEsRUFBRSxRQUhDO0FBSVhDLFFBQUFBLElBQUksRUFBRSxFQUpLO0FBS1hDLFFBQUFBLFdBQVcsRUFBRSxZQUxGO0FBTVhDLFFBQUFBLHFCQUFxQixFQUFFO0FBQ3JCQyxVQUFBQSxRQUFRLEVBQUU7QUFEVztBQU5aLE9BQUQsQ0FEQztBQVdicEMsTUFBQUEsSUFBSSxFQUFFLGlCQVhPO0FBWWJxQyxNQUFBQSxVQUFVLEVBQUU7QUFDVkMsUUFBQUEsUUFBUSxFQUFFO0FBREE7QUFaQyxLQUFmO0FBaUJBNUMsSUFBQUEsTUFBTSxDQUFDUCxrQkFBa0IsQ0FBQ3lDLEtBQUQsQ0FBbkIsQ0FBTixDQUFrQy9CLEVBQWxDLENBQXFDSyxJQUFyQyxDQUEwQ0MsS0FBMUMsQ0FBZ0QwQixRQUFoRDtBQUNELEdBL0NDLENBQUY7QUFnREQsQ0FyRE8sQ0FBUjtBQXVEQXJDLFFBQVEsQ0FBQyxZQUFELEVBQWUsWUFBTTtBQUMzQkMsRUFBQUEsRUFBRSxDQUFDLHFDQUFELEVBQXdDLFlBQU07QUFDOUNDLElBQUFBLE1BQU0sQ0FBQ04sVUFBVSxDQUFDO0FBQ2hCTyxNQUFBQSxPQUFPLEVBQUU7QUFDUDRDLFFBQUFBLEtBQUssRUFBRSxDQUFDO0FBQ041QixVQUFBQSxFQUFFLEVBQUUsR0FERTtBQUVOWixVQUFBQSxVQUFVLEVBQUUsQ0FDVixDQUFDO0FBQ0NDLFlBQUFBLElBQUksRUFBRSxNQURQO0FBRUNDLFlBQUFBLEtBQUssRUFBRSxNQUZSO0FBR0N1QyxZQUFBQSxPQUFPLEVBQUUsQ0FBQztBQUNSeEMsY0FBQUEsSUFBSSxFQUFFLE1BREU7QUFFUkMsY0FBQUEsS0FBSyxFQUFFO0FBRkMsYUFBRCxFQUlULENBQUM7QUFDQ0QsY0FBQUEsSUFBSSxFQUFFLE1BRFA7QUFFQ0MsY0FBQUEsS0FBSyxFQUFFO0FBRlIsYUFBRCxFQUdHO0FBQ0RELGNBQUFBLElBQUksRUFBRSxNQURMO0FBRURDLGNBQUFBLEtBQUssRUFBRTtBQUZOLGFBSEgsQ0FKUyxDQUhWO0FBZUN3QyxZQUFBQSxPQUFPLEVBQUUsQ0FBQyxDQUFELEVBQUksR0FBSjtBQWZWLFdBQUQsRUFnQkc7QUFDRHpDLFlBQUFBLElBQUksRUFBRSxNQURMO0FBRURDLFlBQUFBLEtBQUssRUFBRTtBQUZOLFdBaEJILENBRFU7QUFGTixTQUFEO0FBREE7QUFETyxLQUFELENBQVgsQ0FBTixDQTRCSUosRUE1QkosQ0E0Qk9LLElBNUJQLENBNEJZQyxLQTVCWixDQTRCa0IsQ0FBQztBQUNqQixXQUFLLEdBRFk7QUFFakIsNENBQXNDO0FBRnJCLEtBQUQsQ0E1QmxCO0FBZ0NELEdBakNDLENBQUY7QUFtQ0FWLEVBQUFBLEVBQUUsQ0FBQywwREFBRCxFQUE2RCxZQUFNO0FBQ25FQyxJQUFBQSxNQUFNLENBQUNOLFVBQVUsQ0FBQztBQUNoQk8sTUFBQUEsT0FBTyxFQUFFO0FBQ1A0QyxRQUFBQSxLQUFLLEVBQUUsQ0FBQztBQUNONUIsVUFBQUEsRUFBRSxFQUFFLEdBREU7QUFFTlosVUFBQUEsVUFBVSxFQUFFLENBQ1YsQ0FBQztBQUNDQyxZQUFBQSxJQUFJLEVBQUUsTUFEUDtBQUVDQyxZQUFBQSxLQUFLLEVBQUU7QUFGUixXQUFELEVBR0c7QUFDREQsWUFBQUEsSUFBSSxFQUFFLE1BREw7QUFFREMsWUFBQUEsS0FBSyxFQUFFO0FBRk4sV0FISCxDQURVO0FBRk4sU0FBRCxFQVdKO0FBQ0RVLFVBQUFBLEVBQUUsRUFBRSxHQURIO0FBRURaLFVBQUFBLFVBQVUsRUFBRSxDQUNWLENBQUM7QUFDQ0MsWUFBQUEsSUFBSSxFQUFFLE1BRFA7QUFFQ0MsWUFBQUEsS0FBSyxFQUFFO0FBRlIsV0FBRCxFQUdHO0FBQ0RELFlBQUFBLElBQUksRUFBRSxNQURMO0FBRURDLFlBQUFBLEtBQUssRUFBRTtBQUZOLFdBSEgsQ0FEVTtBQUZYLFNBWEksRUFzQko7QUFDRFUsVUFBQUEsRUFBRSxFQUFFLEdBREg7QUFFRFosVUFBQUEsVUFBVSxFQUFFLENBQ1YsQ0FBQztBQUNDQyxZQUFBQSxJQUFJLEVBQUUsTUFEUDtBQUVDQyxZQUFBQSxLQUFLLEVBQUU7QUFGUixXQUFELEVBR0c7QUFDREQsWUFBQUEsSUFBSSxFQUFFLE1BREw7QUFFREMsWUFBQUEsS0FBSyxFQUFFO0FBRk4sV0FISCxDQURVO0FBRlgsU0F0Qkk7QUFEQTtBQURPLEtBQUQsQ0FBWCxDQUFOLENBcUNJSixFQXJDSixDQXFDT0ssSUFyQ1AsQ0FxQ1lDLEtBckNaLENBcUNrQixDQUFDO0FBQ2pCLFdBQUssR0FEWTtBQUVqQnVDLE1BQUFBLEdBQUcsRUFBRSxHQUZZO0FBR2pCQyxNQUFBQSxNQUFNLEVBQUU7QUFIUyxLQUFELEVBSWY7QUFDRCxXQUFLLEdBREo7QUFFREQsTUFBQUEsR0FBRyxFQUFFO0FBRkosS0FKZSxDQXJDbEI7QUE2Q0QsR0E5Q0MsQ0FBRjtBQStDRCxDQW5GTyxDQUFSO0FBcUZBbEQsUUFBUSxDQUFDLGFBQUQsRUFBZ0IsWUFBTTtBQUM1QkMsRUFBQUEsRUFBRSxDQUFDLDhCQUFELEVBQWlDLFlBQU07QUFDdkNDLElBQUFBLE1BQU0sQ0FBQ1gsV0FBVyxDQUFDO0FBQ2pCWSxNQUFBQSxPQUFPLEVBQUU7QUFDUGlELFFBQUFBLE1BQU0sRUFBRSxDQUFDO0FBQ1A3QyxVQUFBQSxVQUFVLEVBQUUsQ0FBQztBQUNYRSxZQUFBQSxLQUFLLEVBQUU7QUFESSxXQUFELEVBRVQ7QUFDREEsWUFBQUEsS0FBSyxFQUFFO0FBRE4sV0FGUztBQURMLFNBQUQsRUFNTDtBQUNERixVQUFBQSxVQUFVLEVBQUUsQ0FBQztBQUNYRSxZQUFBQSxLQUFLLEVBQUU7QUFESSxXQUFEO0FBRFgsU0FOSztBQUREO0FBRFEsS0FBRCxDQUFaLENBQU4sQ0FjSUosRUFkSixDQWNPSyxJQWRQLENBY1lDLEtBZFosQ0Fja0IsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsQ0FkbEI7QUFlRCxHQWhCQyxDQUFGO0FBa0JBVixFQUFBQSxFQUFFLENBQUMsb0NBQUQsRUFBdUMsWUFBTTtBQUM3Q0MsSUFBQUEsTUFBTSxDQUFDWCxXQUFXLENBQUM7QUFDakJZLE1BQUFBLE9BQU8sRUFBRTtBQUNQaUQsUUFBQUEsTUFBTSxFQUFFLENBQUM7QUFDUEMsVUFBQUEsT0FBTyxFQUFFLFFBREY7QUFFUEMsVUFBQUEsR0FBRyxFQUFFO0FBRkUsU0FBRDtBQUREO0FBRFEsS0FBRCxDQUFaLENBQU4sQ0FPSWpELEVBUEosQ0FPT0ssSUFQUCxDQU9ZQyxLQVBaLENBT2tCLEVBUGxCO0FBUUQsR0FUQyxDQUFGO0FBVUQsQ0E3Qk8sQ0FBUjtBQStCQVgsUUFBUSxDQUFDLFdBQUQsRUFBYyxZQUFNO0FBQzFCQyxFQUFBQSxFQUFFLENBQUMsNEJBQUQsRUFBK0IsWUFBTTtBQUNyQ0MsSUFBQUEsTUFBTSxDQUFDWixTQUFTLENBQUM7QUFDZmlFLE1BQUFBLE9BQU8sRUFBRSxDQUFDLEdBQUQsRUFBTSxLQUFOLEVBQWEsT0FBYjtBQURNLEtBQUQsQ0FBVixDQUFOLENBRUlsRCxFQUZKLENBRU9LLElBRlAsQ0FFWUMsS0FGWixDQUVrQjtBQUNoQjZDLE1BQUFBLFNBQVMsRUFBRSxLQURLO0FBRWhCQyxNQUFBQSxVQUFVLEVBQUU7QUFGSSxLQUZsQjtBQU1ELEdBUEMsQ0FBRjtBQVNBeEQsRUFBQUEsRUFBRSxDQUFDLGdFQUFELEVBQW1FLFlBQU07QUFDekVDLElBQUFBLE1BQU0sQ0FBQ1osU0FBUyxDQUFDLEVBQUQsQ0FBVixDQUFOLENBQXNCZSxFQUF0QixDQUF5Qk0sS0FBekIsQ0FBK0IrQyxTQUEvQjtBQUNELEdBRkMsQ0FBRjtBQUlBekQsRUFBQUEsRUFBRSxDQUFDLHNEQUFELEVBQXlELFlBQU07QUFDL0RDLElBQUFBLE1BQU0sQ0FBQ1osU0FBUyxFQUFWLENBQU4sQ0FBb0JlLEVBQXBCLENBQXVCTSxLQUF2QixDQUE2QitDLFNBQTdCO0FBQ0QsR0FGQyxDQUFGO0FBR0QsQ0FqQk8sQ0FBUjtBQW1CQTFELFFBQVEsQ0FBQyxhQUFELEVBQWdCLFlBQU07QUFDNUJDLEVBQUFBLEVBQUUsQ0FBQyw4QkFBRCxFQUFpQyxZQUFNO0FBQ3ZDQyxJQUFBQSxNQUFNLENBQUNiLFdBQVcsQ0FBQztBQUNqQnNFLE1BQUFBLFNBQVMsRUFBRSxDQUFDLEdBQUQsRUFBTSxHQUFOO0FBRE0sS0FBRCxDQUFaLENBQU4sQ0FFSXRELEVBRkosQ0FFT00sS0FGUCxDQUVhLEdBRmI7QUFHRCxHQUpDLENBQUY7QUFNQVYsRUFBQUEsRUFBRSxDQUFDLGdFQUFELEVBQW1FLFlBQU07QUFDekVDLElBQUFBLE1BQU0sQ0FBQ2IsV0FBVyxDQUFDLEVBQUQsQ0FBWixDQUFOLENBQXdCZ0IsRUFBeEIsQ0FBMkJNLEtBQTNCLENBQWlDK0MsU0FBakM7QUFDRCxHQUZDLENBQUY7QUFJQXpELEVBQUFBLEVBQUUsQ0FBQyxzREFBRCxFQUF5RCxZQUFNO0FBQy9EQyxJQUFBQSxNQUFNLENBQUNiLFdBQVcsRUFBWixDQUFOLENBQXNCZ0IsRUFBdEIsQ0FBeUJNLEtBQXpCLENBQStCK0MsU0FBL0I7QUFDRCxHQUZDLENBQUY7QUFHRCxDQWRPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZWxlc3MtZXNjYXBlICovXG5cbmltcG9ydCB7IHBhcnNlciB9IGZyb20gJ2VtYWlsanMtaW1hcC1oYW5kbGVyJ1xuaW1wb3J0IHtcbiAgcGFyc2VBUFBFTkQsXG4gIHBhcnNlQ09QWSxcbiAgcGFyc2VTRUFSQ0gsXG4gIHBhcnNlTkFNRVNQQUNFLFxuICBwYXJzZUVOVkVMT1BFLFxuICBwYXJzZVNFTEVDVCxcbiAgcGFyc2VCT0RZU1RSVUNUVVJFLFxuICBwYXJzZUZFVENIXG59IGZyb20gJy4vY29tbWFuZC1wYXJzZXInXG5pbXBvcnQgeyB0b1R5cGVkQXJyYXkgfSBmcm9tICcuL2NvbW1vbidcbmltcG9ydCB0ZXN0RW52ZWxvcGUgZnJvbSAnLi4vcmVzL2ZpeHR1cmVzL2VudmVsb3BlJ1xuaW1wb3J0IG1pbWVUb3J0dXJlIGZyb20gJy4uL3Jlcy9maXh0dXJlcy9taW1lLXRvcnR1cmUtYm9keXN0cnVjdHVyZSdcblxuZGVzY3JpYmUoJ3BhcnNlTkFNRVNQQUNFJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIG5vdCBzdWNjZWVkIGZvciBubyBuYW1lc3BhY2UgcmVzcG9uc2UnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHBhcnNlTkFNRVNQQUNFKHtcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgTkFNRVNQQUNFOiBbXVxuICAgICAgfVxuICAgIH0pKS50by5iZS5mYWxzZVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcmV0dXJuIHNpbmdsZSBwZXJzb25hbCBuYW1lc3BhY2UnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHBhcnNlTkFNRVNQQUNFKHtcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgTkFNRVNQQUNFOiBbe1xuICAgICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgW3tcbiAgICAgICAgICAgICAgICB0eXBlOiAnU1RSSU5HJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ0lOQk9YLidcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdTVFJJTkcnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAnLidcbiAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIF0sIG51bGwsIG51bGxcbiAgICAgICAgICBdXG4gICAgICAgIH1dXG4gICAgICB9XG4gICAgfSkpLnRvLmRlZXAuZXF1YWwoe1xuICAgICAgcGVyc29uYWw6IFt7XG4gICAgICAgIHByZWZpeDogJ0lOQk9YLicsXG4gICAgICAgIGRlbGltaXRlcjogJy4nXG4gICAgICB9XSxcbiAgICAgIHVzZXJzOiBmYWxzZSxcbiAgICAgIHNoYXJlZDogZmFsc2VcbiAgICB9KVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcmV0dXJuIHNpbmdsZSBwZXJzb25hbCwgc2luZ2xlIHVzZXJzLCBtdWx0aXBsZSBzaGFyZWQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHBhcnNlTkFNRVNQQUNFKHtcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgTkFNRVNQQUNFOiBbe1xuICAgICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIC8vIHBlcnNvbmFsXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIFt7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1NUUklORycsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICcnXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnU1RSSU5HJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJy8nXG4gICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgLy8gdXNlcnNcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgW3tcbiAgICAgICAgICAgICAgICB0eXBlOiAnU1RSSU5HJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ34nXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnU1RSSU5HJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJy8nXG4gICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgLy8gc2hhcmVkXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIFt7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1NUUklORycsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICcjc2hhcmVkLydcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdTVFJJTkcnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAnLydcbiAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgIFt7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1NUUklORycsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICcjcHVibGljLydcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdTVFJJTkcnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAnLydcbiAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICBdXG4gICAgICAgIH1dXG4gICAgICB9XG4gICAgfSkpLnRvLmRlZXAuZXF1YWwoe1xuICAgICAgcGVyc29uYWw6IFt7XG4gICAgICAgIHByZWZpeDogJycsXG4gICAgICAgIGRlbGltaXRlcjogJy8nXG4gICAgICB9XSxcbiAgICAgIHVzZXJzOiBbe1xuICAgICAgICBwcmVmaXg6ICd+JyxcbiAgICAgICAgZGVsaW1pdGVyOiAnLydcbiAgICAgIH1dLFxuICAgICAgc2hhcmVkOiBbe1xuICAgICAgICBwcmVmaXg6ICcjc2hhcmVkLycsXG4gICAgICAgIGRlbGltaXRlcjogJy8nXG4gICAgICB9LCB7XG4gICAgICAgIHByZWZpeDogJyNwdWJsaWMvJyxcbiAgICAgICAgZGVsaW1pdGVyOiAnLydcbiAgICAgIH1dXG4gICAgfSlcbiAgfSlcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBOSUwgbmFtZXNwYWNlIGhpZXJhcmNoeSBkZWxpbScsICgpID0+IHtcbiAgICBleHBlY3QocGFyc2VOQU1FU1BBQ0Uoe1xuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBOQU1FU1BBQ0U6IFtcbiAgICAgICAgICAvLyBUaGlzIHNwZWNpZmljIHZhbHVlIGlzIHJldHVybmVkIGJ5IHlhaG9vLmNvLmpwJ3NcbiAgICAgICAgICAvLyBpbWFwZ2F0ZSB2ZXJzaW9uIDAuNy42OF8xMV8xLjYxNDc1IElNQVAgc2VydmVyXG4gICAgICAgICAgcGFyc2VyKHRvVHlwZWRBcnJheSgnKiBOQU1FU1BBQ0UgKChcIlwiIE5JTCkpIE5JTCBOSUwnKSlcbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pKS50by5kZWVwLmVxdWFsKHtcbiAgICAgIHBlcnNvbmFsOiBbe1xuICAgICAgICBwcmVmaXg6ICcnLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGxcbiAgICAgIH1dLFxuICAgICAgdXNlcnM6IGZhbHNlLFxuICAgICAgc2hhcmVkOiBmYWxzZVxuICAgIH0pXG4gIH0pXG59KVxuXG5kZXNjcmliZSgncGFyc2VTRUxFQ1QnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcGFyc2UgYSBjb21wbGV0ZSByZXNwb25zZScsICgpID0+IHtcbiAgICBleHBlY3QocGFyc2VTRUxFQ1Qoe1xuICAgICAgY29kZTogJ1JFQUQtV1JJVEUnLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBFWElTVFM6IFt7XG4gICAgICAgICAgbnI6IDEyM1xuICAgICAgICB9XSxcbiAgICAgICAgRkxBR1M6IFt7XG4gICAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgW3tcbiAgICAgICAgICAgICAgdHlwZTogJ0FUT00nLFxuICAgICAgICAgICAgICB2YWx1ZTogJ1xcXFxBbnN3ZXJlZCdcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgdHlwZTogJ0FUT00nLFxuICAgICAgICAgICAgICB2YWx1ZTogJ1xcXFxGbGFnZ2VkJ1xuICAgICAgICAgICAgfV1cbiAgICAgICAgICBdXG4gICAgICAgIH1dLFxuICAgICAgICBPSzogW3tcbiAgICAgICAgICBjb2RlOiAnUEVSTUFORU5URkxBR1MnLFxuICAgICAgICAgIHBlcm1hbmVudGZsYWdzOiBbJ1xcXFxBbnN3ZXJlZCcsICdcXFxcRmxhZ2dlZCddXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBjb2RlOiAnVUlEVkFMSURJVFknLFxuICAgICAgICAgIHVpZHZhbGlkaXR5OiAnMidcbiAgICAgICAgfSwge1xuICAgICAgICAgIGNvZGU6ICdVSURORVhUJyxcbiAgICAgICAgICB1aWRuZXh0OiAnMzgzNjEnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBjb2RlOiAnSElHSEVTVE1PRFNFUScsXG4gICAgICAgICAgaGlnaGVzdG1vZHNlcTogJzM2ODI5MTgnXG4gICAgICAgIH1dXG4gICAgICB9XG4gICAgfSkpLnRvLmRlZXAuZXF1YWwoe1xuICAgICAgZXhpc3RzOiAxMjMsXG4gICAgICBmbGFnczogWydcXFxcQW5zd2VyZWQnLCAnXFxcXEZsYWdnZWQnXSxcbiAgICAgIGhpZ2hlc3RNb2RzZXE6ICczNjgyOTE4JyxcbiAgICAgIHBlcm1hbmVudEZsYWdzOiBbJ1xcXFxBbnN3ZXJlZCcsICdcXFxcRmxhZ2dlZCddLFxuICAgICAgcmVhZE9ubHk6IGZhbHNlLFxuICAgICAgdWlkTmV4dDogMzgzNjEsXG4gICAgICB1aWRWYWxpZGl0eTogMlxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBwYXJzZSByZXNwb25zZSB3aXRoIG5vIG1vZHNlcScsICgpID0+IHtcbiAgICBleHBlY3QocGFyc2VTRUxFQ1Qoe1xuICAgICAgY29kZTogJ1JFQUQtV1JJVEUnLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBFWElTVFM6IFt7XG4gICAgICAgICAgbnI6IDEyM1xuICAgICAgICB9XSxcbiAgICAgICAgRkxBR1M6IFt7XG4gICAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgW3tcbiAgICAgICAgICAgICAgdHlwZTogJ0FUT00nLFxuICAgICAgICAgICAgICB2YWx1ZTogJ1xcXFxBbnN3ZXJlZCdcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgdHlwZTogJ0FUT00nLFxuICAgICAgICAgICAgICB2YWx1ZTogJ1xcXFxGbGFnZ2VkJ1xuICAgICAgICAgICAgfV1cbiAgICAgICAgICBdXG4gICAgICAgIH1dLFxuICAgICAgICBPSzogW3tcbiAgICAgICAgICBjb2RlOiAnUEVSTUFORU5URkxBR1MnLFxuICAgICAgICAgIHBlcm1hbmVudGZsYWdzOiBbJ1xcXFxBbnN3ZXJlZCcsICdcXFxcRmxhZ2dlZCddXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBjb2RlOiAnVUlEVkFMSURJVFknLFxuICAgICAgICAgIHVpZHZhbGlkaXR5OiAnMidcbiAgICAgICAgfSwge1xuICAgICAgICAgIGNvZGU6ICdVSURORVhUJyxcbiAgICAgICAgICB1aWRuZXh0OiAnMzgzNjEnXG4gICAgICAgIH1dXG4gICAgICB9XG4gICAgfSkpLnRvLmRlZXAuZXF1YWwoe1xuICAgICAgZXhpc3RzOiAxMjMsXG4gICAgICBmbGFnczogWydcXFxcQW5zd2VyZWQnLCAnXFxcXEZsYWdnZWQnXSxcbiAgICAgIHBlcm1hbmVudEZsYWdzOiBbJ1xcXFxBbnN3ZXJlZCcsICdcXFxcRmxhZ2dlZCddLFxuICAgICAgcmVhZE9ubHk6IGZhbHNlLFxuICAgICAgdWlkTmV4dDogMzgzNjEsXG4gICAgICB1aWRWYWxpZGl0eTogMlxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBwYXJzZSByZXNwb25zZSB3aXRoIHJlYWQtb25seScsICgpID0+IHtcbiAgICBleHBlY3QocGFyc2VTRUxFQ1Qoe1xuICAgICAgY29kZTogJ1JFQUQtT05MWScsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIEVYSVNUUzogW3tcbiAgICAgICAgICBucjogMTIzXG4gICAgICAgIH1dLFxuICAgICAgICBGTEFHUzogW3tcbiAgICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICBbe1xuICAgICAgICAgICAgICB0eXBlOiAnQVRPTScsXG4gICAgICAgICAgICAgIHZhbHVlOiAnXFxcXEFuc3dlcmVkJ1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICB0eXBlOiAnQVRPTScsXG4gICAgICAgICAgICAgIHZhbHVlOiAnXFxcXEZsYWdnZWQnXG4gICAgICAgICAgICB9XVxuICAgICAgICAgIF1cbiAgICAgICAgfV0sXG4gICAgICAgIE9LOiBbe1xuICAgICAgICAgIGNvZGU6ICdQRVJNQU5FTlRGTEFHUycsXG4gICAgICAgICAgcGVybWFuZW50ZmxhZ3M6IFsnXFxcXEFuc3dlcmVkJywgJ1xcXFxGbGFnZ2VkJ11cbiAgICAgICAgfSwge1xuICAgICAgICAgIGNvZGU6ICdVSURWQUxJRElUWScsXG4gICAgICAgICAgdWlkdmFsaWRpdHk6ICcyJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgY29kZTogJ1VJRE5FWFQnLFxuICAgICAgICAgIHVpZG5leHQ6ICczODM2MSdcbiAgICAgICAgfV1cbiAgICAgIH1cbiAgICB9KSkudG8uZGVlcC5lcXVhbCh7XG4gICAgICBleGlzdHM6IDEyMyxcbiAgICAgIGZsYWdzOiBbJ1xcXFxBbnN3ZXJlZCcsICdcXFxcRmxhZ2dlZCddLFxuICAgICAgcGVybWFuZW50RmxhZ3M6IFsnXFxcXEFuc3dlcmVkJywgJ1xcXFxGbGFnZ2VkJ10sXG4gICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgIHVpZE5leHQ6IDM4MzYxLFxuICAgICAgdWlkVmFsaWRpdHk6IDJcbiAgICB9KVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcGFyc2UgcmVzcG9uc2Ugd2l0aCBOT01PRFNFUSBmbGFnJywgKCkgPT4ge1xuICAgIGV4cGVjdChwYXJzZVNFTEVDVCh7XG4gICAgICBjb2RlOiAnUkVBRC1XUklURScsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIEVYSVNUUzogW3tcbiAgICAgICAgICBucjogMTIzXG4gICAgICAgIH1dLFxuICAgICAgICBGTEFHUzogW3tcbiAgICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICBbe1xuICAgICAgICAgICAgICB0eXBlOiAnQVRPTScsXG4gICAgICAgICAgICAgIHZhbHVlOiAnXFxcXEFuc3dlcmVkJ1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICB0eXBlOiAnQVRPTScsXG4gICAgICAgICAgICAgIHZhbHVlOiAnXFxcXEZsYWdnZWQnXG4gICAgICAgICAgICB9XVxuICAgICAgICAgIF1cbiAgICAgICAgfV0sXG4gICAgICAgIE9LOiBbe1xuICAgICAgICAgIGNvZGU6ICdQRVJNQU5FTlRGTEFHUycsXG4gICAgICAgICAgcGVybWFuZW50ZmxhZ3M6IFsnXFxcXEFuc3dlcmVkJywgJ1xcXFxGbGFnZ2VkJ11cbiAgICAgICAgfSwge1xuICAgICAgICAgIGNvZGU6ICdVSURWQUxJRElUWScsXG4gICAgICAgICAgdWlkdmFsaWRpdHk6ICcyJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgY29kZTogJ1VJRE5FWFQnLFxuICAgICAgICAgIHVpZG5leHQ6ICczODM2MSdcbiAgICAgICAgfSwge1xuICAgICAgICAgIGNvZGU6ICdOT01PRFNFUSdcbiAgICAgICAgfV1cbiAgICAgIH1cbiAgICB9KSkudG8uZGVlcC5lcXVhbCh7XG4gICAgICBleGlzdHM6IDEyMyxcbiAgICAgIGZsYWdzOiBbJ1xcXFxBbnN3ZXJlZCcsICdcXFxcRmxhZ2dlZCddLFxuICAgICAgcGVybWFuZW50RmxhZ3M6IFsnXFxcXEFuc3dlcmVkJywgJ1xcXFxGbGFnZ2VkJ10sXG4gICAgICByZWFkT25seTogZmFsc2UsXG4gICAgICB1aWROZXh0OiAzODM2MSxcbiAgICAgIHVpZFZhbGlkaXR5OiAyLFxuICAgICAgbm9Nb2RzZXE6IHRydWVcbiAgICB9KVxuICB9KVxufSlcblxuZGVzY3JpYmUoJ3BhcnNlRU5WRUxPUEUnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcGFyc2VkIGVudmVsb3BlIG9iamVjdCcsICgpID0+IHtcbiAgICBleHBlY3QocGFyc2VFTlZFTE9QRSh0ZXN0RW52ZWxvcGUuc291cmNlKSkudG8uZGVlcC5lcXVhbCh0ZXN0RW52ZWxvcGUucGFyc2VkKVxuICB9KVxufSlcblxuZGVzY3JpYmUoJ3BhcnNlQk9EWVNUUlVDVFVSRScsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBwYXJzZSBib2R5c3RydWN0dXJlIG9iamVjdCcsICgpID0+IHtcbiAgICBleHBlY3QocGFyc2VCT0RZU1RSVUNUVVJFKG1pbWVUb3J0dXJlLnNvdXJjZSkpLnRvLmRlZXAuZXF1YWwobWltZVRvcnR1cmUucGFyc2VkKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcGFyc2UgYm9keXN0cnVjdHVyZSB3aXRoIHVuaWNvZGUgZmlsZW5hbWUnLCAoKSA9PiB7XG4gICAgdmFyIGlucHV0ID0gW1xuICAgICAgW1xuICAgICAgICB7IHR5cGU6ICdTVFJJTkcnLCB2YWx1ZTogJ0FQUExJQ0FUSU9OJyB9LFxuICAgICAgICB7IHR5cGU6ICdTVFJJTkcnLCB2YWx1ZTogJ09DVEVULVNUUkVBTScgfSxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgeyB0eXBlOiAnU1RSSU5HJywgdmFsdWU6ICdCQVNFNjQnIH0sXG4gICAgICAgIHsgdHlwZTogJ0FUT00nLCB2YWx1ZTogJzQwJyB9LFxuICAgICAgICBudWxsLFxuICAgICAgICBbXG4gICAgICAgICAgeyB0eXBlOiAnU1RSSU5HJywgdmFsdWU6ICdBVFRBQ0hNRU5UJyB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIHsgdHlwZTogJ1NUUklORycsIHZhbHVlOiAnRklMRU5BTUUnIH0sXG4gICAgICAgICAgICB7IHR5cGU6ICdTVFJJTkcnLCB2YWx1ZTogJz0/SVNPLTg4NTktMT9RP0JCUl9IYW5kZWwsX0dld2VyYmUsX0I9RkNyb2JldHJpZWJlLD89ID0/SVNPLTg4NTktMT9RP19wcml2YXRlX0JpbGR1bmdzZWlucmljaHR1bmdlbi50eHQ/PScgfVxuICAgICAgICAgIF1cbiAgICAgICAgXSxcbiAgICAgICAgbnVsbFxuICAgICAgXSxcbiAgICAgIHsgdHlwZTogJ1NUUklORycsIHZhbHVlOiAnTUlYRUQnIH0sXG4gICAgICBbXG4gICAgICAgIHsgdHlwZTogJ1NUUklORycsIHZhbHVlOiAnQk9VTkRBUlknIH0sXG4gICAgICAgIHsgdHlwZTogJ1NUUklORycsIHZhbHVlOiAnLS0tLXNpbmlrYWVsLT89XzEtMTQxMDUwODUyNjUxMTAuNDk5MDM5MjI0NTgxNzkyOTUnIH1cbiAgICAgIF0sXG4gICAgICBudWxsLFxuICAgICAgbnVsbFxuICAgIF1cblxuICAgIHZhciBleHBlY3RlZCA9IHtcbiAgICAgIGNoaWxkTm9kZXM6IFt7XG4gICAgICAgIHBhcnQ6ICcxJyxcbiAgICAgICAgdHlwZTogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScsXG4gICAgICAgIGVuY29kaW5nOiAnYmFzZTY0JyxcbiAgICAgICAgc2l6ZTogNDAsXG4gICAgICAgIGRpc3Bvc2l0aW9uOiAnYXR0YWNobWVudCcsXG4gICAgICAgIGRpc3Bvc2l0aW9uUGFyYW1ldGVyczoge1xuICAgICAgICAgIGZpbGVuYW1lOiAnQkJSIEhhbmRlbCwgR2V3ZXJiZSwgQsO8cm9iZXRyaWViZSwgcHJpdmF0ZSBCaWxkdW5nc2VpbnJpY2h0dW5nZW4udHh0J1xuICAgICAgICB9XG4gICAgICB9XSxcbiAgICAgIHR5cGU6ICdtdWx0aXBhcnQvbWl4ZWQnLFxuICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICBib3VuZGFyeTogJy0tLS1zaW5pa2FlbC0/PV8xLTE0MTA1MDg1MjY1MTEwLjQ5OTAzOTIyNDU4MTc5Mjk1J1xuICAgICAgfVxuICAgIH1cblxuICAgIGV4cGVjdChwYXJzZUJPRFlTVFJVQ1RVUkUoaW5wdXQpKS50by5kZWVwLmVxdWFsKGV4cGVjdGVkKVxuICB9KVxufSlcblxuZGVzY3JpYmUoJ3BhcnNlRkVUQ0gnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcmV0dXJuIHZhbHVlcyBsb3dlcmNhc2Uga2V5cycsICgpID0+IHtcbiAgICBleHBlY3QocGFyc2VGRVRDSCh7XG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIEZFVENIOiBbe1xuICAgICAgICAgIG5yOiAxMjMsXG4gICAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgW3tcbiAgICAgICAgICAgICAgdHlwZTogJ0FUT00nLFxuICAgICAgICAgICAgICB2YWx1ZTogJ0JPRFknLFxuICAgICAgICAgICAgICBzZWN0aW9uOiBbe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdBVE9NJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ0hFQURFUidcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgW3tcbiAgICAgICAgICAgICAgICB0eXBlOiAnQVRPTScsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICdEQVRFJ1xuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ0FUT00nLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAnU1VCSkVDVCdcbiAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgcGFydGlhbDogWzAsIDEyM11cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgdHlwZTogJ0FUT00nLFxuICAgICAgICAgICAgICB2YWx1ZTogJ2FiYydcbiAgICAgICAgICAgIH1dXG4gICAgICAgICAgXVxuICAgICAgICB9XVxuICAgICAgfVxuICAgIH0pKS50by5kZWVwLmVxdWFsKFt7XG4gICAgICAnIyc6IDEyMyxcbiAgICAgICdib2R5W2hlYWRlciAoZGF0ZSBzdWJqZWN0KV08MC4xMjM+JzogJ2FiYydcbiAgICB9XSlcbiAgfSlcblxuICBpdCgnc2hvdWxkIG1lcmdlIG11bHRpcGxlIHJlc3BvbnNlcyBiYXNlZCBvbiBzZXF1ZW5jZSBudW1iZXInLCAoKSA9PiB7XG4gICAgZXhwZWN0KHBhcnNlRkVUQ0goe1xuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBGRVRDSDogW3tcbiAgICAgICAgICBucjogMTIzLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIFt7XG4gICAgICAgICAgICAgIHR5cGU6ICdBVE9NJyxcbiAgICAgICAgICAgICAgdmFsdWU6ICdVSUQnXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIHR5cGU6ICdBVE9NJyxcbiAgICAgICAgICAgICAgdmFsdWU6IDc4OVxuICAgICAgICAgICAgfV1cbiAgICAgICAgICBdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBucjogMTI0LFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIFt7XG4gICAgICAgICAgICAgIHR5cGU6ICdBVE9NJyxcbiAgICAgICAgICAgICAgdmFsdWU6ICdVSUQnXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIHR5cGU6ICdBVE9NJyxcbiAgICAgICAgICAgICAgdmFsdWU6IDc5MFxuICAgICAgICAgICAgfV1cbiAgICAgICAgICBdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBucjogMTIzLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIFt7XG4gICAgICAgICAgICAgIHR5cGU6ICdBVE9NJyxcbiAgICAgICAgICAgICAgdmFsdWU6ICdNT0RTRVEnXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIHR5cGU6ICdBVE9NJyxcbiAgICAgICAgICAgICAgdmFsdWU6ICcxMjcnXG4gICAgICAgICAgICB9XVxuICAgICAgICAgIF1cbiAgICAgICAgfV1cbiAgICAgIH1cbiAgICB9KSkudG8uZGVlcC5lcXVhbChbe1xuICAgICAgJyMnOiAxMjMsXG4gICAgICB1aWQ6IDc4OSxcbiAgICAgIG1vZHNlcTogJzEyNydcbiAgICB9LCB7XG4gICAgICAnIyc6IDEyNCxcbiAgICAgIHVpZDogNzkwXG4gICAgfV0pXG4gIH0pXG59KVxuXG5kZXNjcmliZSgncGFyc2VTRUFSQ0gnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcGFyc2UgU0VBUkNIIHJlc3BvbnNlJywgKCkgPT4ge1xuICAgIGV4cGVjdChwYXJzZVNFQVJDSCh7XG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIFNFQVJDSDogW3tcbiAgICAgICAgICBhdHRyaWJ1dGVzOiBbe1xuICAgICAgICAgICAgdmFsdWU6IDVcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICB2YWx1ZTogN1xuICAgICAgICAgIH1dXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzOiBbe1xuICAgICAgICAgICAgdmFsdWU6IDZcbiAgICAgICAgICB9XVxuICAgICAgICB9XVxuICAgICAgfVxuICAgIH0pKS50by5kZWVwLmVxdWFsKFs1LCA2LCA3XSlcbiAgfSlcblxuICBpdCgnc2hvdWxkIHBhcnNlIGVtcHR5IFNFQVJDSCByZXNwb25zZScsICgpID0+IHtcbiAgICBleHBlY3QocGFyc2VTRUFSQ0goe1xuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBTRUFSQ0g6IFt7XG4gICAgICAgICAgY29tbWFuZDogJ1NFQVJDSCcsXG4gICAgICAgICAgdGFnOiAnKidcbiAgICAgICAgfV1cbiAgICAgIH1cbiAgICB9KSkudG8uZGVlcC5lcXVhbChbXSlcbiAgfSlcbn0pXG5cbmRlc2NyaWJlKCdwYXJzZUNPUFknLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcGFyc2UgQ09QWSByZXNwb25zZScsICgpID0+IHtcbiAgICBleHBlY3QocGFyc2VDT1BZKHtcbiAgICAgIGNvcHl1aWQ6IFsnMScsICcxOjMnLCAnMyw0LDInXVxuICAgIH0pKS50by5kZWVwLmVxdWFsKHtcbiAgICAgIHNyY1NlcVNldDogJzE6MycsXG4gICAgICBkZXN0U2VxU2V0OiAnMyw0LDInXG4gICAgfSlcbiAgfSlcblxuICBpdCgnc2hvdWxkIHJldHVybiB1bmRlZmluZWQgd2hlbiByZXNwb25zZSBkb2VzIG5vdCBjb250YWluIGNvcHl1aWQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHBhcnNlQ09QWSh7fSkpLnRvLmVxdWFsKHVuZGVmaW5lZClcbiAgfSlcblxuICBpdCgnc2hvdWxkIHJldHVybiB1bmRlZmluZWQgd2hlbiByZXNwb25zZSBpcyBub3QgZGVmaW5lZCcsICgpID0+IHtcbiAgICBleHBlY3QocGFyc2VDT1BZKCkpLnRvLmVxdWFsKHVuZGVmaW5lZClcbiAgfSlcbn0pXG5cbmRlc2NyaWJlKCdwYXJzZUFQUEVORCcsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBwYXJzZSBBUFBFTkQgcmVzcG9uc2UnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHBhcnNlQVBQRU5EKHtcbiAgICAgIGFwcGVuZHVpZDogWycxJywgJzMnXVxuICAgIH0pKS50by5lcXVhbCgnMycpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gdW5kZWZpbmVkIHdoZW4gcmVzcG9uc2UgZG9lcyBub3QgY29udGFpbiBjb3B5dWlkJywgKCkgPT4ge1xuICAgIGV4cGVjdChwYXJzZUFQUEVORCh7fSkpLnRvLmVxdWFsKHVuZGVmaW5lZClcbiAgfSlcblxuICBpdCgnc2hvdWxkIHJldHVybiB1bmRlZmluZWQgd2hlbiByZXNwb25zZSBpcyBub3QgZGVmaW5lZCcsICgpID0+IHtcbiAgICBleHBlY3QocGFyc2VBUFBFTkQoKSkudG8uZXF1YWwodW5kZWZpbmVkKVxuICB9KVxufSlcbiJdfQ==